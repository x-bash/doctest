# shellcheck shell=bash

debug_init doctest

_doctest_parse_code(){
    # awk -f "$(xrc std/doctest.awk)" "${1:?Provide file name}"
    awk -f "./doctest.awk" "${1:?Provide file name}"
}

_doctest_run_code(){
    local test_script_fifo=${test_script_fifo:?Provide test script fifo}
    local out_fifo=${out_fifo:?Provide out fifo}

    local script_code="${1:?"Provide script code"}"
    local script_actual_result script_expect_result="${2}"
    # TODO: How to get rid of it in sh
    # echo "${script_code:1}" >"$test_script_fifo"
    echo "${script_code#> *}" >"$test_script_fifo"
    script_actual_result="$(cat "$out_fifo")"
    if [ ! "$script_actual_result" = "$script_expect_result" ]; then
        {
            printf "%b\n" "\033[31mNOT ok\033[0m"
            printf "%b\n" "\033[36m--code--\033[0m"
            echo "$script_code"
            printf "%b\n" "\033[32m--expect--\033[0m"
            echo "$script_expect_result"
            printf "%b\n"  "\033[31m--actual--\033[0m"
            echo "$script_actual_result"          
            printf "%b\n"  "===="
            return 1
        }
    fi
}

# In the future, using the awk to accelerate.
# Main Method.
doctest(){
    local test_script_fifo="doctest.tmp.input.fifo" 
    local out_fifo="doctest.tmp.output.fifo"
    local IFS="
"

    rm "$test_script_fifo" "$out_fifo" 2>/dev/null 
    mkfifo "$test_script_fifo" "$out_fifo"

    export test_script_fifo out_fifo
    (
        #shellcheck disable=SC1090
        . "$1";
        # _doctest_exec_script "${1:?script}" "$test_script_fifo" "$out_fifo" 1>/dev/null 2>&1
        _doctest_exec_script "${1:?script}" "$test_script_fifo" "$out_fifo" # 1>/dev/null 2>&1
    ) &

    local PROCESS_ID="$!"
    local return_code=0

    local line
    local script_code
    local script_expect_result

    local SEP
    SEP="$(printf "\001")"
    local RESULT_SEP
    RESULT_SEP="$(printf "\002")"

    while read -r line; do
        script_code=$(echo "$line" | cut -d "$SEP" -f 1 )
        script_expect_result=$(echo "$line" | cut -d "$SEP" -f 2 | tr "$RESULT_SEP" '
' )

        _doctest_run_code "$script_code" "$script_expect_result" || {
            return_code=$?
            rm "$test_script_fifo" "$out_fifo"
            kill -9 $PROCESS_ID 1>/dev/null 2>&1
            return $return_code
            # break 2   # break 2 unsupported in sh
        }   
    done <<A
$(_doctest_parse_code "$1")
A

    echo "return" > "$test_script_fifo"
    cat "$out_fifo" # Or the execScript will be block because of the redirection
    rm "$test_script_fifo" "$out_fifo"
    kill -9 $PROCESS_ID 1>/dev/null 2>&1
    return $return_code
}

_doctest_exec_script(){
    local IFS="
"
    while :; do
        eval "$(cat "${2:?fifo file}")" 1>"${3:?output fifo file}" 2>&1
    done
}

# _doctest_exec_script(){
#     local IFS="
# "
#     while :; do
#         local script
#         script="$(cat "${2:?fifo file}")"
#         echo "K-SCRIPT: $script" >&2
#         local result
#         result="$(eval "$script")"
#         echo "K-RESULT: ----> ${#result}" >&2
#         printf "%s" "$(eval "$script")" 1>"${3:?output fifo file}" 2>&1
#     done
# }

[ "$#" -ne 0 ] && doctest "$@"
